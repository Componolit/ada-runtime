#!/usr/bin/env python3

# Copyright (C) 2018 Componolit GmbH
#
# This file is part of the Componolit Ada runtime, which is distributed
# under the terms of the GNU Affero General Public License version 3.
#
# As a special exception under Section 7 of GPL version 3, you are granted
# additional permissions described in the GCC Runtime Library Exception,
# version 3.1, as published by the Free Software Foundation.

import sys

exceptions = {}

def gen_header():
    return """// AUTOGENERATED, edit doc/exceptions.md

typedef enum {{
{}
}} exception_t;

""".format("\n".join(["    {} = {},".format(exceptions[name].upper(), hex(name)) for name in sorted(list(exceptions))]).strip(","))

def gen_spec():
    return """--  AUTOGENERATED, edit doc/exceptions.md

package Ada_Exceptions is
   pragma Preelaborate;

   type Exception_Type is (
{}
   );

   for Exception_Type use (
{}
   );

end Ada_Exceptions;
""".format(
    "\n".join(["      {},".format(exceptions[name]) for name in sorted(list(exceptions))]).strip(","),
    "\n".join(["      {} => 16#{}#,".format(exceptions[name], hex(name)[2:]) for name in sorted(list(exceptions))]).strip(",")
    )

with open(sys.argv[1], "r") as md:
    for line in md.readlines():
        try:
            exception = line.split("|")[1].strip(" `")
            excid = line.split("|")[2].strip(" `")
            if not excid.startswith("0x"):
                raise ValueError
            exceptions[int(excid, 16)] = exception
        except:
            print("IGNORE: " + line.strip("\n"))

with open("ada_exceptions.h", "w") as header:
    header.write(gen_header())

with open("ada_exceptions.ads", "w") as spec:
    spec.write(gen_spec())
